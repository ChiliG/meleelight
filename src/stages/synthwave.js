import {bg1,bg2,fg1,fg2, ui} from "main/main";
import {Vec2D} from "main/util/Vec2D";
import {Vec3D, splatCoordinates, add} from "./3D";
import {chromaticAberration} from "main/vfx/chromaticAberration";
import {makeColour} from "main/vfx/makeColour";

const hScale = 0.8;
const hLineCount = 20;
const vScale = 2.5;
const vLineCount = 15; // number of vertical lines is actually 2*vLineCount+1
const height = 3;
const heightOffset = 497;
const speed = -0.04;
const focal = 5;

// camera data
const origin = new Vec3D(0,height,-focal);
const direction = new Vec3D(0,0,1);
const right = new Vec3D(1,0,0);
const up = new Vec3D(0,1,0);

const furthest = hLineCount*hScale-focal;

const offsetPoint1 = splatCoordinates(origin, direction, right, up, new Vec3D(0,0, 1e5));
const offsetPoint2 = splatCoordinates(origin, direction, right, up, new Vec3D(0,0, furthest));
const offset = offsetPoint1.y - offsetPoint2.y;

const horizonRightX = scaleToCanvas(splatCoordinates(origin, direction, right, up, new Vec3D(vScale*vLineCount,0, furthest))).x;

const palmTreeVertices = [new Vec3D (0.95982992649078,-5.62542200088501,2.97708249092102),new Vec3D (0.89874368906021,-2.55661535263062,0.92799842357636),new Vec3D (1.86682736873627,5.01525783538818,4.88735961914062),new Vec3D (1.18297040462494,3.51919960975647,1.61188006401062),new Vec3D (1.16268074512482,3.23694443702698,2.35152769088745),new Vec3D (0.94037175178528,4.37359762191772,1.21705138683319),new Vec3D (-1.17882025241852,0.70669686794281,3.49159479141235),new Vec3D (0.96068280935287,3.84136533737183,1.28602647781372),new Vec3D (0.5156797170639,3.68871402740479,3.29878211021423),new Vec3D (0.9929638504982,4.34530925750732,2.6741156578064),new Vec3D (1.14843082427979,4.78631973266602,3.37870955467224),new Vec3D (1.14528262615204,4.47912883758545,5.53893232345581),new Vec3D (0.91452175378799,3.62189483642578,7.57598638534546),new Vec3D (1.18854939937592,5.07372951507568,6.49972343444824),new Vec3D (1.35847461223602,5.56690549850464,5.01187419891357),new Vec3D (1.44304621219635,5.3532600402832,3.4163863658905),new Vec3D (1.85740387439728,7.41238832473755,-0.73583191633224),new Vec3D (1.24829733371735,4.92528200149536,2.16786599159241),new Vec3D (1.34133744239807,6.18239498138428,2.56681561470032),new Vec3D (0.65282905101776,7.47235727310181,3.80604767799377),new Vec3D (-0.85502165555954,7.44043922424316,5.35505628585815),new Vec3D (0.52091598510742,-2.91097283363342,0.27829268574715),new Vec3D (1.690554022789,8.02059555053711,2.82932639122009),new Vec3D (1.95327508449554,6.31078147888184,1.54882252216339),new Vec3D (0.46936890482903,8.45628261566162,4.36512517929077),new Vec3D (1.41423583030701,5.24552774429321,0.55478376150131),new Vec3D (4.22032070159912,7.94817686080933,-0.35051307082176),new Vec3D (3.04441976547241,7.38173913955688,0.4872730076313),new Vec3D (1.77288293838501,5.5956130027771,-0.80527192354202),new Vec3D (2.05661725997925,7.49577951431274,1.28649616241455),new Vec3D (2.63429880142212,7.66879034042358,0.39734414219856),new Vec3D (1.49913692474365,7.814208984375,-0.65359252691269),new Vec3D (1.03955745697021,7.74222993850708,-1.51668000221252),new Vec3D (1.43611204624176,7.25383758544922,-0.790303170681),new Vec3D (1.8389847278595,5.96653938293457,-0.36154782772064),new Vec3D (0.79778146743774,4.28639268875122,2.15655398368835),new Vec3D (1.11835408210754,5.62216234207153,1.61099183559418),new Vec3D (5.9051399230957,4.04272985458374,-4.81679964065552),new Vec3D (4.68268871307373,5.08914804458618,-4.0747652053833),new Vec3D (3.38657808303833,5.57836771011353,-2.84189581871033),new Vec3D (2.09183931350708,4.75736665725708,-0.70693677663803),new Vec3D (3.26865482330322,6.25224494934082,-1.85858047008514),new Vec3D (1.9740424156189,6.10876655578613,0.74054759740829),new Vec3D (1.25688886642456,1.80408549308777,-3.87391829490662),new Vec3D (1.52286636829376,2.69945740699768,-3.24290752410889),new Vec3D (1.60996282100677,3.46392893791199,-2.30528283119202),new Vec3D (1.63797760009766,3.74355721473694,-0.3059586584568),new Vec3D (2.0987548828125,2.3734142780304,-0.74550265073776),new Vec3D (3.02157807350159,8.07422733306885,0.61738294363022),new Vec3D (1.82948660850525,-0.42412835359573,-1.16393613815308),new Vec3D (1.33847761154175,4.88915729522705,0.58986949920654),new Vec3D (1.23877513408661,3.22700619697571,0.97910040616989),new Vec3D (0.80753201246262,5.32870149612427,4.67821931838989),new Vec3D (0.89874368906021,-2.31054973602295,-0.34181660413742),new Vec3D (0.95982992649078,-5.52135753631592,3.878366947174e-2),new Vec3D (-0.41314795613289,-5.57291603088379,0.70889729261398),new Vec3D (1.64626026153564,3.19389748573303,-3.70562267303467),new Vec3D (0.99871182441711,5.16709470748901,5.8371114730835),new Vec3D (1.30246484279633,3.25759649276733,-3.33875560760498),new Vec3D (1.91860520839691,4.32683658599854,-2.65532231330872),new Vec3D (1.02358281612396,5.22537851333618,3.3603081703186),new Vec3D (2.02659702301025,1.14591228961945,-1.14311027526855),new Vec3D (1.38939881324768,1.14609253406525,-0.64451372623444),new Vec3D (-0.3170385658741,2.20732641220093,3.08636331558228),new Vec3D (-0.45150217413902,2.31551504135132,3.83566355705261),new Vec3D (1.22792637348175,1.2123110294342,0.10562951117754),new Vec3D (1.17576289176941,0.82363831996918,1.05839943885803),new Vec3D (0.32168436050415,8.06736183166504,3.40702819824219),new Vec3D (1.09886229038239,4.16555595397949,-2.15908932685852),new Vec3D (1.30793833732605,1.4220826625824,-1.08677566051483),new Vec3D (-0.53087389469147,2.69447350502014,3.2787652015686),new Vec3D (0.72789973020554,0.83192431926727,0.4714178442955),new Vec3D (0.93136292695999,2.7007851600647,-0.47657537460327),new Vec3D (1.43084740638733,4.8506965637207,2.55255103111267),new Vec3D (0.38116699457169,3.89558506011963,2.4150869846344),new Vec3D (0.72520345449448,7.36762189865112,2.19008088111877),new Vec3D (4.74604797363281,6.47236919403076,-3.68648314476013),new Vec3D (3.8033926486969,6.18362092971802,-3.98956680297852),new Vec3D (1.49332892894745,6.49571943283081,1.10935747623444),new Vec3D (3.25994682312012,7.11975860595703,-2.29496812820435),new Vec3D (1.54719972610474,6.39143419265747,0.18111471831799),new Vec3D (2.22795963287354,6.74661731719971,-2.62549829483032),new Vec3D (1.4250476360321,7.27143907546997,-0.81140851974487),new Vec3D (1.85851812362671,7.26700687408447,4.172795638442e-2),new Vec3D (1.22898316383362,7.49272346496582,-0.41830709576607),new Vec3D (1.81906390190125,6.63749074935913,-0.57198077440262),new Vec3D (1.97832775115967,6.76786756515503,0.27127343416214),new Vec3D (1.18190741539001,4.61878156661987,4.63875102996826),new Vec3D (1.93853533267975,4.10297727584839,1.43004143238068),new Vec3D (1.63834381103516,3.65763878822327,1.43062710762024),new Vec3D (1.35165524482727,-2.40433645248413,0.27829268574715),new Vec3D (2.1563663482666,5.48156356811523,0.18117102980614),new Vec3D (3.07528281211853,7.57851028442383,0.95526152849197),new Vec3D (1.46721982955933,3.92470455169678,2.08401608467102),new Vec3D (2.25318288803101,5.31448936462402,1.85314381122589),new Vec3D (2.09627723693848,4.57810544967651,0.19364278018475),new Vec3D (2.1939582824707,4.91404724121094,0.73317486047745),new Vec3D (1.46247065067291,-5.43771553039551,1.68793308734894),new Vec3D (1.8721638917923,4.92447662353516,5.67248439788818),new Vec3D (1.9931036233902,3.06652736663818,-3.3587498664856),new Vec3D (1.661985039711,4.93437194824219,3.53072476387024),new Vec3D (1.24830365180969,7.77422857284546,4.22698450088501),new Vec3D (2.29655194282532,3.84084010124207,-1.90352416038513),new Vec3D (1.9924441576004,1.48393738269806,-0.52719748020172),new Vec3D (4.188587144017e-2,2.39609146118164,3.42510890960693),new Vec3D (1.60996246337891,0.71354335546494,0.68463903665543),new Vec3D (1.94621682167053,2.64938974380493,0.55584383010864),new Vec3D (1.18552160263062,3.67750978469849,2.58672165870666),new Vec3D (2.23816609382629,6.89788389205933,3.02008247375488),new Vec3D (4.71509838104248,5.88208913803101,-2.84123373031616),new Vec3D (2.20097732543945,6.36965084075928,1.38341319561005),new Vec3D (2.18949055671692,6.41444635391235,-0.13641008734703)];
const palmTreeEdges = [[43,56],[56,58],[58,43],[58,44],[44,43],[43,58],[58,56],[56,59],[59,68],[68,58],[62,49],[49,69],[69,62],[17,15],[15,60],[60,17],[88,96],[96,95],[95,102],[102,45],[45,46],[46,88],[64,6],[6,70],[70,64],[1,0],[0,55],[55,21],[21,1],[72,47],[47,46],[46,72],[94,88],[88,18],[18,94],[21,71],[71,66],[66,1],[1,21],[53,65],[65,71],[71,21],[21,53],[55,54],[54,53],[53,21],[21,55],[37,76],[76,77],[77,37],[38,77],[77,39],[39,38],[8,64],[64,70],[70,74],[74,8],[6,63],[63,70],[70,6],[68,58],[58,44],[44,45],[45,68],[70,63],[63,4],[4,74],[74,70],[77,81],[81,39],[39,77],[75,18],[18,36],[36,75],[80,86],[86,42],[42,25],[25,80],[71,65],[65,51],[51,7],[7,71],[83,86],[86,80],[80,84],[84,83],[46,106],[106,89],[89,88],[88,46],[78,23],[23,5],[5,50],[50,78],[26,48],[48,30],[30,26],[5,23],[23,36],[36,5],[17,15],[15,100],[100,73],[73,17],[38,37],[37,77],[77,38],[77,76],[76,79],[79,81],[81,77],[12,98],[98,11],[11,12],[30,48],[48,29],[29,78],[78,30],[14,52],[52,60],[60,15],[15,14],[14,15],[15,100],[100,2],[2,14],[17,60],[60,10],[10,9],[9,17],[75,22],[22,24],[24,67],[67,75],[42,91],[91,111],[111,86],[86,42],[20,19],[19,67],[67,20],[34,85],[85,80],[80,25],[25,34],[62,69],[69,72],[72,62],[30,27],[27,26],[26,30],[31,83],[83,84],[84,31],[10,87],[87,10],[10,87],[87,10],[36,23],[23,22],[22,75],[75,36],[19,18],[18,75],[75,19],[32,31],[31,84],[84,32],[82,32],[32,84],[84,82],[74,4],[4,3],[3,7],[7,35],[35,74],[78,42],[42,27],[27,30],[30,78],[34,95],[95,91],[91,34],[80,85],[85,33],[33,82],[82,84],[84,80],[24,101],[101,20],[20,24],[51,62],[62,72],[72,7],[7,51],[17,35],[35,7],[7,17],[68,59],[59,40],[40,50],[50,68],[18,17],[17,7],[7,5],[5,18],[69,61],[61,47],[47,72],[72,69],[100,93],[93,73],[73,100],[44,45],[45,102],[102,99],[99,44],[3,66],[66,71],[71,7],[7,3],[2,98],[98,13],[13,14],[14,2],[87,10],[10,60],[60,52],[52,87],[49,103],[103,61],[61,49],[28,39],[39,40],[40,50],[50,28],[11,87],[87,52],[52,57],[57,11],[42,78],[78,50],[50,25],[25,42],[46,5],[5,7],[7,72],[72,46],[24,20],[20,67],[67,24],[9,8],[8,74],[74,35],[35,9],[13,12],[12,57],[57,13],[18,88],[88,89],[89,17],[17,18],[12,11],[11,57],[57,12],[49,61],[61,69],[69,49],[81,28],[28,39],[39,81],[45,46],[46,68],[68,45],[36,18],[18,5],[5,36],[67,19],[19,75],[75,67],[43,99],[99,56],[56,43],[99,43],[43,44],[44,99],[99,102],[102,59],[59,56],[56,99],[62,103],[103,49],[49,62],[35,17],[17,9],[9,35],[101,108],[108,19],[19,101],[64,104],[104,6],[6,64],[1,90],[90,97],[97,0],[0,1],[106,46],[46,47],[47,106],[17,73],[73,93],[93,89],[89,17],[90,1],[1,66],[66,105],[105,90],[53,90],[90,105],[105,65],[65,53],[97,90],[90,53],[53,54],[54,97],[37,109],[109,76],[76,37],[38,39],[39,109],[109,38],[8,107],[107,104],[104,64],[64,8],[6,104],[104,63],[63,6],[79,41],[41,95],[95,34],[34,79],[104,107],[107,4],[4,63],[63,104],[109,39],[39,41],[41,109],[108,94],[94,18],[18,108],[79,81],[81,28],[28,34],[34,79],[105,89],[89,51],[51,65],[65,105],[83,16],[16,111],[111,86],[86,83],[95,39],[39,40],[40,95],[100,10],[10,9],[9,93],[93,100],[26,92],[92,48],[48,26],[88,94],[94,23],[23,88],[100,2],[2,87],[87,10],[10,100],[38,109],[109,37],[37,38],[109,41],[41,79],[79,76],[76,109],[110,42],[42,91],[91,95],[95,96],[96,110],[92,110],[110,29],[29,48],[48,92],[55,0],[0,97],[97,54],[54,55],[68,50],[50,46],[46,68],[108,101],[101,24],[24,22],[22,108],[41,39],[39,95],[95,41],[20,101],[101,19],[19,20],[34,91],[91,111],[111,85],[85,34],[62,106],[106,103],[103,62],[92,26],[26,27],[27,92],[31,16],[16,83],[83,31],[110,96],[96,88],[88,23],[23,29],[29,110],[94,108],[108,22],[22,23],[23,94],[19,108],[108,18],[18,19],[32,16],[16,31],[31,32],[82,16],[16,32],[32,82],[107,93],[93,89],[89,3],[3,4],[4,107],[34,25],[25,50],[50,28],[28,34],[13,98],[98,12],[12,13],[111,16],[16,82],[82,33],[33,85],[85,111],[51,89],[89,106],[106,62],[62,51],[9,93],[93,107],[107,8],[8,9],[102,95],[95,40],[40,59],[59,102],[50,5],[5,46],[46,50],[103,106],[106,47],[47,61],[61,103],[87,11],[11,98],[98,2],[2,87],[3,89],[89,105],[105,66],[66,3],[14,52],[52,57],[57,13],[13,14],[10,87],[87,10],[10,87],[87,10],[110,92],[92,27],[27,42],[42,110],[29,23],[23,78],[78,29]];

function tetrahedronAt(v) {
  return { edges    : [[0,1], [0,2], [1,2],[0,3],[1,3],[2,3]]
         , vertices : [ new Vec3D(1,0,0), new Vec3D(-0.5, 0, 0.866), new Vec3D(-0.5,0,-0.866), new Vec3D(0,0.866,0) ]
         , offset   : v
         , zmin : -0.866
         , zmax :  0.866 };
};

function palmTreeAt(v) {
  return { edges    : palmTreeEdges
         , vertices : palmTreeVertices
         , offset   : v
         , zmin : -0.23576404154301
         , zmax :  1.181028008461 };
};

const objects = [ tetrahedronAt( new Vec3D(-6,0,15) )
                , tetrahedronAt( new Vec3D(-4,0,24) )
                , tetrahedronAt( new Vec3D(2 ,0,26) )
                , tetrahedronAt( new Vec3D(7 ,0,37) )
                , palmTreeAt   ( new Vec3D(-20,5.62542200088501,21) ) ];

// horizontal lines
for (let i=0;i<hLineCount;i++) {
  objects.push( { edges    : [[0,1]]
                , vertices : [ new Vec3D(-15*vScale,0,0), new Vec3D(15*vScale,0,0)]
                , offset   : new Vec3D(0,0,i*hScale-focal)
                , zmin : 0
                , zmax : 0 } );
}

export function drawSynthWaveInit() {
  console.log(palmTreeEdges.length);
  // sun
  // create gradient
  const top = 150;
  const topLine = top+60;
  const radius = 200;
  const bottom = 500;
  const sunGlow = bg1.createRadialGradient(600,top+radius,radius,600,top+radius,radius+60);
  sunGlow.addColorStop(0, "rgba(232, 76, 110, 0.4)");
  sunGlow.addColorStop(1, "rgba(142, 67, 168, 0)");
  bg1.fillStyle = sunGlow;
  bg1.fillRect(0,0,1200,750);
  const sunGrad = bg1.createLinearGradient(0, top, 0, top+radius*2);
  sunGrad.addColorStop(0, "rgba(250, 227, 59, 1)");
  sunGrad.addColorStop(0.5, "rgba(250, 97, 96, 1)");
  sunGrad.addColorStop(0.75, "rgba(250, 52, 104, 1)");
  sunGrad.addColorStop(1, "rgba(250, 60, 134, 1)");
  bg1.fillStyle = sunGrad;
  // creating clipping path
  const lineSeperation = 40;
  const thickness = 3;
  bg1.save();
  bg1.beginPath();
  bg1.moveTo(0,0);
  bg1.lineTo(1200,0);
  bg1.lineTo(1200,topLine);
  bg1.lineTo(0,topLine);
  for (let i=0;i<7;i++) {  
    bg1.moveTo(0,topLine+i*lineSeperation+i*thickness);
    bg1.lineTo(1200,topLine+i*lineSeperation+i*thickness);
    bg1.lineTo(1200,topLine+(i+1)*lineSeperation);
    bg1.lineTo(0,topLine+(i+1)*lineSeperation);
  }
  bg1.clip();
  // draw sun
  bg1.beginPath();
  bg1.arc(600,top+radius,radius,0,Math.PI*2);
  bg1.closePath();
  bg1.fill();
  bg1.restore();
  // draw screen over everything else
  fg1.globalCompositeOperation = "screen";
  const bgGrad = fg1.createLinearGradient(0, 0, 0, 750);
  bgGrad.addColorStop(0, "rgba(253, 117, 121, 0.6");
  bgGrad.addColorStop(0.6, "rgba(224, 36, 131, 0.6");
  fg1.fillStyle = bgGrad;
  fg1.fillRect(0,0,1200,750);
  fg1.globalCompositeOperation = "source-over";
}

export function drawSynthWave() {
  const col = { r : 130, g : 30, b : 190 };
  // draw vertical lines
  chromaticAberration( bg2, (c1,c2) => drawVertLines(c1), col, col, 1, new Vec2D(1.3,0) );
  // horizon, at y-coordinate height + heightOffset;
  bg2.lineWidth = 3;
  bg2.strokeStyle = makeColour(col.r, col.g, col.b, 1);
  const y = height + heightOffset;
  bg2.beginPath();
  bg2.moveTo(1198-horizonRightX,y);
  bg2.lineTo(   2+horizonRightX,y);
  bg2.stroke();

  drawObjects(bg2, col);

  // move objects
  for (let o=0; o<objects.length; o++) {
    const obj = objects[o];
    if (obj.offset.z + obj.zmax < -focal) {
      obj.offset.z = furthest - obj.zmin;
    }
    else {
      obj.offset.z += speed;
    }
  }

}

function drawObjects(ctx, col) {  
  for (let o=0; o<objects.length; o++) {
    const obj = objects[o];
    chromaticAberration( bg2, (c1,c2) => drawObject(ctx, c1, obj), col, col, 1, new Vec2D(Math.max(0.1, 2-0.2*obj.offset.z),0) );
  }
}

function drawObject(ctx, col, obj) {
  ctx.lineWidth = Math.max(0.5,3-0.2*obj.offset.z);
  ctx.strokeStyle = col;
  ctx.beginPath();
  for (let e=0; e<obj.edges.length; e++) {
    const edge = obj.edges[e];
    const v1 = add(obj.vertices[edge[0]], obj.offset);
    const v2 = add(obj.vertices[edge[1]], obj.offset);
    const p1 = splatCoordinates(origin, direction, right, up, v1);
    const p2 = splatCoordinates(origin, direction, right, up, v2);
    if (p1 !== null && p2 !== null) {
      const sp1 = scaleToCanvas(p1);
      const sp2 = scaleToCanvas(p2);
      ctx.moveTo(sp1.x, sp1.y);
      ctx.lineTo(sp2.x, sp2.y);
    }
  }
  ctx.stroke();
}

function scaleToCanvas( v ) {
  return new Vec2D( 600+166*v.x
                  , height+heightOffset-166*(offset+v.y) );
}

function drawVertLines(col) {
  bg2.save();
  bg2.beginPath();
  bg2.moveTo(0,750);
  bg2.lineTo(1200,750);
  bg2.lineTo(1200, height + heightOffset);
  bg2.lineTo(0, height + heightOffset);
  bg2.clip();
  const sp2 = scaleToCanvas(offsetPoint1);
  bg2.lineWidth = 3;
  bg2.strokeStyle = col;
  bg2.beginPath();
  for (let i=-vLineCount;i<vLineCount+1;i++) {
    const p1 = splatCoordinates(origin, direction, right, up, new Vec3D(vScale*i,0,-focal+1));
    const sp1 = scaleToCanvas(p1);
    bg2.moveTo(sp1.x, sp1.y);
    bg2.lineTo(sp2.x, sp2.y);
  }
  bg2.stroke();
  bg2.restore();
}
